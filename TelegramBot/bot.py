import telebot
import config
import random
from telebot import types
from mg import get_map_cell
bot = telebot.TeleBot(config.TOKEN)

#–ù–ï –†–ê–ë–û–¢–ê–ï–¢ (–ö–∞–∫ –¥–µ–ª–∞?)

cols, rows = 8, 8
@bot.message_handler(commands=['labirint'])
def play_message(message):
	map_cell = get_map_cell(cols, rows)

	user_data = {
		'map': map_cell,
		'x': 0,
		'y': 0
	}

	maps[message.chat.id] = user_data

	bot.send_message(message.from_user.id, get_map_str(map_cell, (0, 0)), reply_markup=keyboard)


keyboard = telebot.types.InlineKeyboardMarkup()
keyboard.row( telebot.types.InlineKeyboardButton('‚Üê', callback_data='left'),
			  telebot.types.InlineKeyboardButton('‚Üë', callback_data='up'),
			  telebot.types.InlineKeyboardButton('‚Üì', callback_data='down'),
			  telebot.types.InlineKeyboardButton('‚Üí', callback_data='right') )

maps = {}

def get_map_str(map_cell, player):
	map_str = ""
	for y in range(rows * 2 - 1):
		for x in range(cols * 2 - 1):
			if map_cell[x + y * (cols * 2 - 1)]:
				map_str += "‚¨õ"
			elif (x, y) == player:
				map_str += "üî¥"
			else:
				map_str += "‚¨ú"
		map_str += "\n"

	return map_str




@bot.callback_query_handler(func=lambda call: True)
def callback_func(query):
	user_data = maps[query.message.chat.id]
	new_x, new_y = user_data['x'], user_data['y']

	if query.data == 'left':
		new_x -= 1
	if query.data == 'right':
		new_x += 1
	if query.data == 'up':
		new_y -= 1
	if query.data == 'down':
		new_y += 1

	if new_x < 0 or new_x > 2 * cols - 2 or new_y < 0 or new_y > rows * 2 - 2:
		return None
	if user_data['map'][new_x + new_y * (cols * 2 - 1)]:
		return None

	user_data['x'], user_data['y'] = new_x, new_y

	if new_x == cols * 2 - 2 and new_y == rows * 2 - 2:
		bot.edit_message_text( chat_id=query.message.chat.id,
							   message_id=query.message.id,
							   text="–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏" )
		return None

	bot.edit_message_text( chat_id=query.message.chat.id,
						   message_id=query.message.id,
						   text=get_map_str(user_data['map'], (new_x, new_y)),
						   reply_markup=keyboard )


@bot.message_handler(commands=['start'])
def welcome(message):
	bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n... {1.first_name} -–±–æ—Ç ,–≤—ã–ø–æ–ª–Ω—è—é—â–∏–π —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. –ü–æ–¥—Ä–æ–±–Ω–µ–µ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –≤—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /help.".format(
                         message.from_user, bot.get_me()))

@bot.message_handler(commands=['menu'])
def welcome(message):
    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ")
    item2 = types.KeyboardButton("üòä –ö–∞–∫ –¥–µ–ª–∞?")

    markup.add(item1, item2)

    bot.send_message(message.chat.id,
                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ {0.first_name} –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –ø–æ—è–≤–∏–≤—à–∏—Ö—Å—è –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ".format(
                         message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['help'])
def send_welcome(message):
	bot.reply_to(message, "/start - –≤—ã–∑–æ–≤ –Ω–∞—á–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π." \
                 "     /help - –≤—ã–∑–æ–≤ –ø–æ—è—Å–Ω—è—é—â–µ–π —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã(–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)."\
                 "     /settings ‚Äî (–ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è."\
                 "     /chatcommands - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º(–∫–∞–∫ —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º)."\
                 "     /games - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å—ã–≥—Ä–∞—Ç—å."\
				 "     /menu - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫–∏, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∏–º–µ–µ—Ç —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é"


                 )


@bot.message_handler(commands=['settings'])
def send_welcome(message):
	bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–ø–æ—Å–æ–±–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∂–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π! :–í" )


@bot.message_handler(commands=['chatcommands'])
def send_welcome(message):
	bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ,–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∂–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π! :–í" )


@bot.message_handler(commands=['games'])
def send_welcome(message):
	bot.reply_to(message, "/labirint - –∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å—Å—è –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞(–ø–æ–ø–∞—Å—Ç—å –∏–∑ –ø—Ä–∞–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞, –≤ –∫—Ä–∞–π–Ω–∏–π –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª" )




@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.chat.type == 'private':
        if message.text == 'üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
            bot.send_message(message.chat.id, str(random.randint(0, 100)))
        elif message.text == 'üòä –ö–∞–∫ –¥–µ–ª–∞?':

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
            item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad')

            markup.add(item1, item2)

            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Å–∞–º –∫–∞–∫?', reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢. –ù–∞–ø–∏—à–∏—Ç–µ /start-—á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ /help-–µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ —á—Ç–æ –¥–µ–ª–∞—Ç—å ')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ üòä')
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id, '–ë—ã–≤–∞–µ—Ç üò¢')

            # remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üòä –ö–∞–∫ –¥–µ–ª–∞?",
                                  reply_markup=None)

            # show alert
            #bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                      #text="–≠–¢–û –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!!11")

    except Exception as e:
        print(repr(e))

bot.polling(none_stop=True, interval=0)
